
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(knitr)
Warning message:
package ‘knitr’ was built under R version 3.4.4 
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.4.4 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.4.4 
> library(plyr)
------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: ‘plyr’

The following objects are masked from ‘package:dplyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

Warning message:
package ‘plyr’ was built under R version 3.4.4 
> activity <- read.csv("activity.csv",header=T)
> totalstepsperday <- aggregate(steps ~ date, data = activity, FUN = sum, na.rm = TRUE)
> totalstepsperday
         date steps
1  2012-10-02   126
2  2012-10-03 11352
3  2012-10-04 12116
4  2012-10-05 13294
5  2012-10-06 15420
6  2012-10-07 11015
7  2012-10-09 12811
8  2012-10-10  9900
9  2012-10-11 10304
10 2012-10-12 17382
11 2012-10-13 12426
12 2012-10-14 15098
13 2012-10-15 10139
14 2012-10-16 15084
15 2012-10-17 13452
16 2012-10-18 10056
17 2012-10-19 11829
18 2012-10-20 10395
19 2012-10-21  8821
20 2012-10-22 13460
21 2012-10-23  8918
22 2012-10-24  8355
23 2012-10-25  2492
24 2012-10-26  6778
25 2012-10-27 10119
26 2012-10-28 11458
27 2012-10-29  5018
28 2012-10-30  9819
29 2012-10-31 15414
30 2012-11-02 10600
31 2012-11-03 10571
32 2012-11-05 10439
33 2012-11-06  8334
34 2012-11-07 12883
35 2012-11-08  3219
36 2012-11-11 12608
37 2012-11-12 10765
38 2012-11-13  7336
39 2012-11-15    41
40 2012-11-16  5441
41 2012-11-17 14339
42 2012-11-18 15110
43 2012-11-19  8841
44 2012-11-20  4472
45 2012-11-21 12787
46 2012-11-22 20427
47 2012-11-23 21194
48 2012-11-24 14478
49 2012-11-25 11834
50 2012-11-26 11162
51 2012-11-27 13646
52 2012-11-28 10183
53 2012-11-29  7047
> ## converting dates to Y-M-D format
> activity$date <- as.Date(activity$date, "%Y-%m-%d")
> ## calculate steps as it relates to date using SUM (per day)
> hist(totalstepsperday$steps, 
+     main="Total Steps per Day", 
+     xlab="Number of Steps per Day", 
+     ylab = "Interval",
+     col="orange",
+ breaks=50)
> msteps <- mean(totalstepsperday$steps)
> msteps
[1] 10766.19
> ## median of total steps per day
> medsteps <- median(totalstepsperday$steps)
> medsteps
[1] 10765
> ## check work using summary
> summary(totalstepsperday)
         date        steps      
 2012-10-02: 1   Min.   :   41  
 2012-10-03: 1   1st Qu.: 8841  
 2012-10-04: 1   Median :10765  
 2012-10-05: 1   Mean   :10766  
 2012-10-06: 1   3rd Qu.:13294  
 2012-10-07: 1   Max.   :21194  
 (Other)   :47                  
> ## five minute average using steps to interval - FUN = mean instead of sum
> fivemin <- aggregate(steps ~ interval, data = activity, FUN = mean, na.rm = TRUE)
> ## line chart
> plot(x = fivemin$interval, 
+     y = fivemin$steps, 
+     type = "l", 
+     col = "orange",
+     xlab = "5-minute Intervals",
+     ylab = "Average Steps Taken ~ Days",
+     main = "Average Daily Activity Pattern")
> maxsteps <- fivemin$interval[which.max(fivemin$steps)]
> maxsteps
[1] 835
> ## sum of all the NA in data = activity
> impute <- sum(is.na(activity$steps))
> impute
[1] 2304
> activity2 <- activity
> nas <- is.na(activity2$steps)
> avg_interval <- tapply(activity2$steps, activity2$interval, mean, na.rm=TRUE, simplify = TRUE)
> activity2$steps[nas] <- avg_interval[as.character(activity2$interval[nas])]
> names(activity2)
[1] "steps"    "date"     "interval"
> ## Check for no-NA
> sum(is.na(activity2))
[1] 0
> ## Similar analysis without NAs now
> totalstepsperday2 <- aggregate(steps ~ date, data = activity2, FUN = sum, na.rm = TRUE)
> totalstepsperday2
         date    steps
1  2012-10-01 10766.19
2  2012-10-02   126.00
3  2012-10-03 11352.00
4  2012-10-04 12116.00
5  2012-10-05 13294.00
6  2012-10-06 15420.00
7  2012-10-07 11015.00
8  2012-10-08 10766.19
9  2012-10-09 12811.00
10 2012-10-10  9900.00
11 2012-10-11 10304.00
12 2012-10-12 17382.00
13 2012-10-13 12426.00
14 2012-10-14 15098.00
15 2012-10-15 10139.00
16 2012-10-16 15084.00
17 2012-10-17 13452.00
18 2012-10-18 10056.00
19 2012-10-19 11829.00
20 2012-10-20 10395.00
21 2012-10-21  8821.00
22 2012-10-22 13460.00
23 2012-10-23  8918.00
24 2012-10-24  8355.00
25 2012-10-25  2492.00
26 2012-10-26  6778.00
27 2012-10-27 10119.00
28 2012-10-28 11458.00
29 2012-10-29  5018.00
30 2012-10-30  9819.00
31 2012-10-31 15414.00
32 2012-11-01 10766.19
33 2012-11-02 10600.00
34 2012-11-03 10571.00
35 2012-11-04 10766.19
36 2012-11-05 10439.00
37 2012-11-06  8334.00
38 2012-11-07 12883.00
39 2012-11-08  3219.00
40 2012-11-09 10766.19
41 2012-11-10 10766.19
42 2012-11-11 12608.00
43 2012-11-12 10765.00
44 2012-11-13  7336.00
45 2012-11-14 10766.19
46 2012-11-15    41.00
47 2012-11-16  5441.00
48 2012-11-17 14339.00
49 2012-11-18 15110.00
50 2012-11-19  8841.00
51 2012-11-20  4472.00
52 2012-11-21 12787.00
53 2012-11-22 20427.00
54 2012-11-23 21194.00
55 2012-11-24 14478.00
56 2012-11-25 11834.00
57 2012-11-26 11162.00
58 2012-11-27 13646.00
59 2012-11-28 10183.00
60 2012-11-29  7047.00
61 2012-11-30 10766.19
> ## Histogram without the NA values
> hist(totalstepsperday2$steps, 
+     main = "Total Steps per Day (no-NA)", 
+     xlab = "Number of Steps per Day", 
+     ylab = "Interval",
+     col="green",
+     breaks=50)
> ## What is the impact of imputing data?
> summary(totalstepsperday)
         date        steps      
 2012-10-02: 1   Min.   :   41  
 2012-10-03: 1   1st Qu.: 8841  
 2012-10-04: 1   Median :10765  
 2012-10-05: 1   Mean   :10766  
 2012-10-06: 1   3rd Qu.:13294  
 2012-10-07: 1   Max.   :21194  
 (Other)   :47                  
> summary(totalstepsperday2)
      date                steps      
 Min.   :2012-10-01   Min.   :   41  
 1st Qu.:2012-10-16   1st Qu.: 9819  
 Median :2012-10-31   Median :10766  
 Mean   :2012-10-31   Mean   :10766  
 3rd Qu.:2012-11-15   3rd Qu.:12811  
 Max.   :2012-11-30   Max.   :21194  
> ## Mean and median values are almost identical, but the quantiles are significantly different.
> ## Data has three fields, and we will add a new one in the next step - 11
> head(activity2)
      steps       date interval
1 1.7169811 2012-10-01        0
2 0.3396226 2012-10-01        5
3 0.1320755 2012-10-01       10
4 0.1509434 2012-10-01       15
5 0.0754717 2012-10-01       20
6 2.0943396 2012-10-01       25
> ## Add the new weekend/weekday field
> activity2<- activity2%>%
+         mutate(typeofday= ifelse(weekdays(activity2$date)=="Saturday" | weekdays(activity2$date)=="Sunday", "Weekend", "Weekday"))
> head(activity2)
      steps       date interval typeofday
1 1.7169811 2012-10-01        0   Weekday
2 0.3396226 2012-10-01        5   Weekday
3 0.1320755 2012-10-01       10   Weekday
4 0.1509434 2012-10-01       15   Weekday
5 0.0754717 2012-10-01       20   Weekday
6 2.0943396 2012-10-01       25   Weekday
> ## Time to plot - Line chart
> fivemin2<- aggregate(steps ~ interval, data = activity2, FUN = mean, na.rm = TRUE)
> head(fivemin2)
  interval     steps
1        0 1.7169811
2        5 0.3396226
3       10 0.1320755
4       15 0.1509434
5       20 0.0754717
6       25 2.0943396
> ggplot(activity2, aes(x =interval , y=steps, color=typeofday)) +
+        geom_line() +
+        labs(title = "Ave Daily Steps (type of day)", x = "Interval", y = "Total Number of Steps") +
+        facet_wrap(~ typeofday, ncol = 1, nrow=2)
> 
